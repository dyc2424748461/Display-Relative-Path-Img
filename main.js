/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HtmlLocalSrcPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HtmlLocalSrcPlugin = class extends import_obsidian.Plugin {
  async processMarkdown(view) {
    const activeFile = view.file;
    if (!activeFile)
      return;
    const targetLinks = Array.from(view.containerEl.querySelectorAll("img")).filter((link) => {
      const isRelativePath = !link.src.startsWith("http") && !link.src.startsWith("https");
      return isRelativePath && link.src.includes(activeFile.basename);
    });
    let activePath = this.app.vault.getResourcePath(activeFile);
    activePath = activePath.substring(0, activePath.lastIndexOf("/"));
    for (const link of targetLinks) {
      let cleanLink = link.src.replace("app://obsidian.md/", "");
      cleanLink = cleanLink.replace("capacitor://localhost/", "");
      let fullLink = activePath + "/" + cleanLink;
      link.src = fullLink;
      link.addEventListener("click", (event) => this.triggerImagePreview(event, fullLink, activeFile));
    }
  }
  triggerImagePreview(event, imageUrl, activeFile) {
    event.preventDefault();
    const activeLeaf = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    this.app.workspace.trigger("image-preview:open", {
      src: imageUrl,
      activeLeaf
    });
  }
  onload() {
    this.registerEvent(this.app.workspace.on("file-open", this.onFileOpen.bind(this)));
    this.registerEvent(this.app.workspace.on("quick-preview", this.onEditorPreview.bind(this)));
    this.registerEvent(this.app.workspace.on("active-leaf-change", this.onEditorPreview.bind(this)));
  }
  async onFileOpen() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView instanceof import_obsidian.MarkdownView) {
      await this.processMarkdown(activeView);
    }
  }
  async onEditorPreview(source) {
    await this.processMarkdown(source);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBNYXJrZG93blZpZXcsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdG1sTG9jYWxTcmNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRwcml2YXRlIGFzeW5jIHByb2Nlc3NNYXJrZG93bih2aWV3OiBNYXJrZG93blZpZXcpIHtcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdmlldy5maWxlO1xuXHRcdGlmICghYWN0aXZlRmlsZSkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgdGFyZ2V0TGlua3MgPSBBcnJheS5mcm9tKHZpZXcuY29udGFpbmVyRWwucXVlcnlTZWxlY3RvckFsbCgnaW1nJykpLmZpbHRlcigobGluaykgPT4ge1xuXHRcdFx0Y29uc3QgaXNSZWxhdGl2ZVBhdGggPSAhbGluay5zcmMuc3RhcnRzV2l0aCgnaHR0cCcpICYmICFsaW5rLnNyYy5zdGFydHNXaXRoKCdodHRwcycpO1xuXHRcdFx0cmV0dXJuIGlzUmVsYXRpdmVQYXRoICYmIGxpbmsuc3JjLmluY2x1ZGVzKGFjdGl2ZUZpbGUuYmFzZW5hbWUpO1xuXHRcdH0pO1xuXG5cdFx0bGV0IGFjdGl2ZVBhdGggPSB0aGlzLmFwcC52YXVsdC5nZXRSZXNvdXJjZVBhdGgoYWN0aXZlRmlsZSk7XG5cdFx0YWN0aXZlUGF0aCA9IGFjdGl2ZVBhdGguc3Vic3RyaW5nKDAsIGFjdGl2ZVBhdGgubGFzdEluZGV4T2YoJy8nKSk7XG5cblx0XHRmb3IgKGNvbnN0IGxpbmsgb2YgdGFyZ2V0TGlua3MpIHtcblx0XHRcdGxldCBjbGVhbkxpbmsgPSBsaW5rLnNyYy5yZXBsYWNlKCdhcHA6Ly9vYnNpZGlhbi5tZC8nLCAnJyk7XG5cdFx0XHQvLyBGb3IgaU9TXG5cdFx0XHRjbGVhbkxpbmsgPSBjbGVhbkxpbmsucmVwbGFjZSgnY2FwYWNpdG9yOi8vbG9jYWxob3N0LycsICcnKTtcblxuXHRcdFx0bGV0IGZ1bGxMaW5rID0gYWN0aXZlUGF0aCArICcvJyArIGNsZWFuTGluaztcblx0XHRcdGxpbmsuc3JjID0gZnVsbExpbms7XG5cblx0XHRcdC8vIEFkZCBjbGljayBldmVudCBsaXN0ZW5lciB0byB0cmlnZ2VyIGltYWdlIHByZXZpZXdcblx0XHRcdGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHRoaXMudHJpZ2dlckltYWdlUHJldmlldyhldmVudCwgZnVsbExpbmssIGFjdGl2ZUZpbGUpKTtcblx0XHR9XG5cblx0XHQvLyBVc2UgYSBQcm9taXNlIHRvIGRlbGF5IHRoZSBwcm9jZXNzaW5nXG5cblxuXHR9XG5cblx0cHJpdmF0ZSB0cmlnZ2VySW1hZ2VQcmV2aWV3KGV2ZW50OiBNb3VzZUV2ZW50LCBpbWFnZVVybDogc3RyaW5nLCBhY3RpdmVGaWxlOiBURmlsZSkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgZGVmYXVsdCBiZWhhdmlvciAob3BlbmluZyB0aGUgaW1hZ2UpXG5cblx0XHRjb25zdCBhY3RpdmVMZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHQvLyBUcmlnZ2VyIGltYWdlIHByZXZpZXdcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2UudHJpZ2dlcignaW1hZ2UtcHJldmlldzpvcGVuJywge1xuXHRcdFx0c3JjOiBpbWFnZVVybCxcblx0XHRcdGFjdGl2ZUxlYWY6IGFjdGl2ZUxlYWYsXG5cdFx0fSk7XG5cdH1cblxuXHRvbmxvYWQoKSB7XG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KHRoaXMuYXBwLndvcmtzcGFjZS5vbignZmlsZS1vcGVuJywgdGhpcy5vbkZpbGVPcGVuLmJpbmQodGhpcykpKTtcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQodGhpcy5hcHAud29ya3NwYWNlLm9uKCdxdWljay1wcmV2aWV3JywgdGhpcy5vbkVkaXRvclByZXZpZXcuYmluZCh0aGlzKSkpO1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsIHRoaXMub25FZGl0b3JQcmV2aWV3LmJpbmQodGhpcykpKTtcblxuXHR9XG5cblx0YXN5bmMgb25GaWxlT3BlbigpIHtcblx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRpZiAoYWN0aXZlVmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xuXHRcdFx0YXdhaXQgdGhpcy5wcm9jZXNzTWFya2Rvd24oYWN0aXZlVmlldyk7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgb25FZGl0b3JQcmV2aWV3KHNvdXJjZTogTWFya2Rvd25WaWV3KSB7XG5cdFx0YXdhaXQgdGhpcy5wcm9jZXNzTWFya2Rvd24oc291cmNlKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE0QztBQUU1QyxJQUFxQixxQkFBckIsY0FBZ0QsdUJBQU87QUFBQSxFQUN0RCxNQUFjLGdCQUFnQixNQUFvQjtBQUNqRCxVQUFNLGFBQWEsS0FBSztBQUN4QixRQUFJLENBQUM7QUFBWTtBQUVqQixVQUFNLGNBQWMsTUFBTSxLQUFLLEtBQUssWUFBWSxpQkFBaUIsS0FBSyxDQUFDLEVBQUUsT0FBTyxDQUFDLFNBQVM7QUFDekYsWUFBTSxpQkFBaUIsQ0FBQyxLQUFLLElBQUksV0FBVyxNQUFNLEtBQUssQ0FBQyxLQUFLLElBQUksV0FBVyxPQUFPO0FBQ25GLGFBQU8sa0JBQWtCLEtBQUssSUFBSSxTQUFTLFdBQVcsUUFBUTtBQUFBLElBQy9ELENBQUM7QUFFRCxRQUFJLGFBQWEsS0FBSyxJQUFJLE1BQU0sZ0JBQWdCLFVBQVU7QUFDMUQsaUJBQWEsV0FBVyxVQUFVLEdBQUcsV0FBVyxZQUFZLEdBQUcsQ0FBQztBQUVoRSxlQUFXLFFBQVEsYUFBYTtBQUMvQixVQUFJLFlBQVksS0FBSyxJQUFJLFFBQVEsc0JBQXNCLEVBQUU7QUFFekQsa0JBQVksVUFBVSxRQUFRLDBCQUEwQixFQUFFO0FBRTFELFVBQUksV0FBVyxhQUFhLE1BQU07QUFDbEMsV0FBSyxNQUFNO0FBR1gsV0FBSyxpQkFBaUIsU0FBUyxDQUFDLFVBQVUsS0FBSyxvQkFBb0IsT0FBTyxVQUFVLFVBQVUsQ0FBQztBQUFBLElBQ2hHO0FBQUEsRUFLRDtBQUFBLEVBRVEsb0JBQW9CLE9BQW1CLFVBQWtCLFlBQW1CO0FBQ25GLFVBQU0sZUFBZTtBQUVyQixVQUFNLGFBQWEsS0FBSyxJQUFJLFVBQVUsb0JBQW9CLDRCQUFZO0FBRXRFLFNBQUssSUFBSSxVQUFVLFFBQVEsc0JBQXNCO0FBQUEsTUFDaEQsS0FBSztBQUFBLE1BQ0w7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFQSxTQUFTO0FBQ1IsU0FBSyxjQUFjLEtBQUssSUFBSSxVQUFVLEdBQUcsYUFBYSxLQUFLLFdBQVcsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUNqRixTQUFLLGNBQWMsS0FBSyxJQUFJLFVBQVUsR0FBRyxpQkFBaUIsS0FBSyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUMxRixTQUFLLGNBQWMsS0FBSyxJQUFJLFVBQVUsR0FBRyxzQkFBc0IsS0FBSyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsQ0FBQztBQUFBLEVBRWhHO0FBQUEsRUFFQSxNQUFNLGFBQWE7QUFDbEIsVUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLG9CQUFvQiw0QkFBWTtBQUN0RSxRQUFJLHNCQUFzQiw4QkFBYztBQUN2QyxZQUFNLEtBQUssZ0JBQWdCLFVBQVU7QUFBQSxJQUN0QztBQUFBLEVBQ0Q7QUFBQSxFQUVBLE1BQU0sZ0JBQWdCLFFBQXNCO0FBQzNDLFVBQU0sS0FBSyxnQkFBZ0IsTUFBTTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
