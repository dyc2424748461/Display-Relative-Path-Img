/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HtmlLocalSrcPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HtmlLocalSrcPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.registerMarkdownPostProcessor((element, ctx) => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      const activeFile = activeView == null ? void 0 : activeView.file;
      if (activeFile) {
        const targetLinks = Array.from(element.getElementsByTagName("img")).filter(
          (link) => {
            return link.src.lastIndexOf(":") === 3;
          }
        );
        let activePath = this.app.vault.getResourcePath(activeFile);
        activePath = activePath ? activePath.substring(0, activePath.lastIndexOf("/")) : "";
        for (const link of targetLinks) {
          let cleanLink = link.src.replace("app://obsidian.md/", "");
          cleanLink = cleanLink.replace("capacitor://localhost/", "");
          let fullLink = activePath + "/" + cleanLink;
          link.src = fullLink;
          if (import_obsidian.Platform.isMobile) {
            link.style.objectFit = "contain";
            link.style.height = "100px";
          }
        }
      }
    });
    this.registerMarkdownPostProcessor(this.modifyHTML.bind(this));
  }
  modifyHTML(el, ctx) {
    console.log("Markdown rendering completed:", ctx.sourcePath);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGxhdGZvcm0sIFBsdWdpbiwgVEZpbGUsIE1hcmtkb3duVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIdG1sTG9jYWxTcmNQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRvbmxvYWQoKSB7XG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3NvcigoZWxlbWVudCwgY3R4KSA9PiB7XG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdGNvbnN0IGFjdGl2ZUZpbGUgPSBhY3RpdmVWaWV3Py5maWxlO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZWxlbWVudCk7XG5cdFx0XHRpZiAoYWN0aXZlRmlsZSkge1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhhY3RpdmVGaWxlLmJhc2VuYW1lKVxuXG5cdFx0XHRcdGNvbnN0IHRhcmdldExpbmtzID0gQXJyYXkuZnJvbShlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW1nXCIpKS5maWx0ZXIoXG5cdFx0XHRcdFx0KGxpbmspID0+IHtcblx0XHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKGxpbmsuc3JjKTtcblx0XHRcdFx0XHRcdHJldHVybiBsaW5rLnNyYy5sYXN0SW5kZXhPZignOicpID09PSAzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblx0XHRcdFx0Ly8gY29uc29sZS5sb2codGFyZ2V0TGlua3MpO1xuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhhY3RpdmVGaWxlKTtcblxuXHRcdFx0XHRsZXQgYWN0aXZlUGF0aCA9IHRoaXMuYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChhY3RpdmVGaWxlKTtcblx0XHRcdFx0YWN0aXZlUGF0aCA9IGFjdGl2ZVBhdGggPyBhY3RpdmVQYXRoLnN1YnN0cmluZygwLCBhY3RpdmVQYXRoLmxhc3RJbmRleE9mKFwiL1wiKSkgOiAnJztcblxuXHRcdFx0XHRmb3IgKGNvbnN0IGxpbmsgb2YgdGFyZ2V0TGlua3MpIHtcblx0XHRcdFx0XHRsZXQgY2xlYW5MaW5rID0gbGluay5zcmMucmVwbGFjZSgnYXBwOi8vb2JzaWRpYW4ubWQvJywgJycpO1xuXHRcdFx0XHRcdC8vIEZvciBpT1Ncblx0XHRcdFx0XHRjbGVhbkxpbmsgPSBjbGVhbkxpbmsucmVwbGFjZSgnY2FwYWNpdG9yOi8vbG9jYWxob3N0LycsICcnKTtcblxuXHRcdFx0XHRcdGxldCBmdWxsTGluayA9IGFjdGl2ZVBhdGggKyAnLycgKyBjbGVhbkxpbms7XG5cdFx0XHRcdFx0bGluay5zcmMgPSBmdWxsTGluaztcblxuXHRcdFx0XHRcdGlmIChQbGF0Zm9ybS5pc01vYmlsZSkge1xuXHRcdFx0XHRcdFx0Ly8gTW9kaWZ5IHN0eWxpbmcgZm9yIG1vYmlsZSBwbGF0Zm9ybVxuXHRcdFx0XHRcdFx0bGluay5zdHlsZS5vYmplY3RGaXQgPSBcImNvbnRhaW5cIjtcblx0XHRcdFx0XHRcdGxpbmsuc3R5bGUuaGVpZ2h0ID0gXCIxMDBweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5yZWdpc3Rlck1hcmtkb3duUG9zdFByb2Nlc3Nvcih0aGlzLm1vZGlmeUhUTUwuYmluZCh0aGlzKSk7XG5cdH1cblxuXHRtb2RpZnlIVE1MKGVsOiBIVE1MRWxlbWVudCwgY3R4OiB7IHNvdXJjZVBhdGg6IHN0cmluZyB9KSB7XG5cdFx0Ly8gUGVyZm9ybSBhZGRpdGlvbmFsIG1vZGlmaWNhdGlvbnMgdG8gSFRNTCBpZiBuZWVkZWRcblx0XHRjb25zb2xlLmxvZyhcIk1hcmtkb3duIHJlbmRlcmluZyBjb21wbGV0ZWQ6XCIsIGN0eC5zb3VyY2VQYXRoKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFzRDtBQUV0RCxJQUFxQixxQkFBckIsY0FBZ0QsdUJBQU87QUFBQSxFQUN0RCxTQUFTO0FBQ1IsU0FBSyw4QkFBOEIsQ0FBQyxTQUFTLFFBQVE7QUFDcEQsWUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLG9CQUFvQiw0QkFBWTtBQUN0RSxZQUFNLGFBQWEseUNBQVk7QUFFL0IsVUFBSSxZQUFZO0FBR2YsY0FBTSxjQUFjLE1BQU0sS0FBSyxRQUFRLHFCQUFxQixLQUFLLENBQUMsRUFBRTtBQUFBLFVBQ25FLENBQUMsU0FBUztBQUVULG1CQUFPLEtBQUssSUFBSSxZQUFZLEdBQUcsTUFBTTtBQUFBLFVBQ3RDO0FBQUEsUUFDRDtBQUlBLFlBQUksYUFBYSxLQUFLLElBQUksTUFBTSxnQkFBZ0IsVUFBVTtBQUMxRCxxQkFBYSxhQUFhLFdBQVcsVUFBVSxHQUFHLFdBQVcsWUFBWSxHQUFHLENBQUMsSUFBSTtBQUVqRixtQkFBVyxRQUFRLGFBQWE7QUFDL0IsY0FBSSxZQUFZLEtBQUssSUFBSSxRQUFRLHNCQUFzQixFQUFFO0FBRXpELHNCQUFZLFVBQVUsUUFBUSwwQkFBMEIsRUFBRTtBQUUxRCxjQUFJLFdBQVcsYUFBYSxNQUFNO0FBQ2xDLGVBQUssTUFBTTtBQUVYLGNBQUkseUJBQVMsVUFBVTtBQUV0QixpQkFBSyxNQUFNLFlBQVk7QUFDdkIsaUJBQUssTUFBTSxTQUFTO0FBQUEsVUFDckI7QUFBQSxRQUNEO0FBQUEsTUFDRDtBQUFBLElBQ0QsQ0FBQztBQUVELFNBQUssOEJBQThCLEtBQUssV0FBVyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQzlEO0FBQUEsRUFFQSxXQUFXLElBQWlCLEtBQTZCO0FBRXhELFlBQVEsSUFBSSxpQ0FBaUMsSUFBSSxVQUFVO0FBQUEsRUFDNUQ7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
